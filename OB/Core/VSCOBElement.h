
#ifndef _VSC_OB_ELEMENT_H_
#define _VSC_OB_ELEMENT_H_

#include "VSCOB.h"
#include "VSCOBDisplay.h"
#include "VSCBroadcaster.h"
#include "VSCListener.h"

#include "OgreBulletDynamics.h"

#include <boost/shared_ptr.hpp>
#include <boost/weak_ptr.hpp>
#include <boost/enable_shared_from_this.hpp> 

#include <map>
#include <string>


namespace VSC {
    
    namespace OB {
        
        /*
         *  An Element represents an object in the scene, dynamic or static.
         *  It is generated by Scene::Factory. It should be subclassed to associate an ogre
         *  representation in the scene.
         */
        
        class Element
        {
            
        public:
            
            typedef boost::shared_ptr<Element>      SPtr;   // Smart pointers are only used to reference Elements by Scene::Factory
            typedef boost::weak_ptr<Element>        WPtr;   // Weak pointers are used everywhere else
            
            friend class Scene;
            friend class ElementFactory;
            
            
            Element(Scene_WPtr scene, OgreBulletDynamics::RigidBody* rigidBody) :
            mScene(scene), mRigidBody(rigidBody), mSilentCollisions(false), mImmobilized(false) {}
            
            virtual ~Element() { destroy(); }
            
            /*
             *  No public setter, cannot change the element internals once it is constructed. This
             *  deliberate design decision.
             */
            
            Scene_SPtr getScene(void) const {return mScene.lock();};
            OgreBulletDynamics::RigidBody* getRigidBody(void) const {return mRigidBody;}
            
            bool silentCollisions() const {return mSilentCollisions;}
            void setSilentCollisions(bool silent) {mSilentCollisions = silent;}
            
            std::string getName(void) const  {return mName;}
            int getIdentifier(void) const {return mIdentifier;}
            
            bool isImmobilized(void);
            void setImmobilized(bool immobilized);
            
            void setMass(Float mass);
            Float getMass(void);
            
        protected:
            
            /*
             *  Destroy should be overridden to perform all necessary operations to remove the element from the Scene
             *  and all associated Ogre/Bullet stuff which it is used by. However subclasses should call the base implementation
             *  which removes the rigid body from the OgreBulletDynamics::World.
             */
            
            virtual void destroy(void);
            
            void setName(std::string n) {mName = n;}
            void setIdentifier(int i) {mIdentifier = i;}
            
            
        private:
            
            Scene_WPtr                              mScene;
            OgreBulletDynamics::RigidBody*          mRigidBody;
            bool                                    mSilentCollisions;
            bool                                    mImmobilized;
            Float                                   mMass;
            
            std::string                             mName;
            int                                     mIdentifier;
            
        };
        
        std::ostream& operator << (std::ostream& stream, const Element& element);
        
    }
}

#endif //_VSC_OB_ELEMENT_H_

