
#ifndef _VSC_OGRE_BULLET_SCENE_H_
#define _VSC_OGRE_BULLET_SCENE_H_

#include "OgreBulletDynamics.h"
#include "VSCOBInputListener.h"
#include "VSCOBBetaGUIListener.h"
#include "VSCOBKeyboardAction.h"
#include "VSCOBKeyBindings.h"
#include "VSCOBCameraController.h"
#include "OIS.h"

#include <boost/shared_ptr.hpp>
#include <boost/weak_ptr.hpp>
#include <boost/enable_shared_from_this.hpp> 

#include <map>
#include <string>


namespace VSC {
    
    namespace OB {
        
        /*
         *  A Scene is where the action takes place, it contains the ogre/bullet stuff which is used 
         *  to represent it. It offers APIs to create and control elements (through its factory). It does
         *  not however respond directly to user input. Use VSC::OB::SceneController for that.
         */

        class Scene 
        {
            
        public:
            
            typedef boost::shared_ptr<Scene>    SPtr;
            typedef boost::weak_ptr<Scene>      WPtr; // Weak pointers are needed for Element and Factory objects
            
            typedef std::map<std::string, Ogre::Light*> LightMap;
            
            /*
             *  A Scene::Element represents an object in the scene, dynamic or static or whatever.
             *  It is generated by Scene::Factory. It should be subclassed
             */
            
            class Element
            {
                
            public:
                
                typedef boost::shared_ptr<Scene>    SPtr;   // Smart pointers are only used to reference Elements by Scene::Factory
                typedef boost::weak_ptr<Scene>      WPtr;   // Weak pointers are used everywhere else
                
                Element(Scene::WPtr scene) : mScene(scene) {}
                virtual ~Element() { destroy() }
                
                Scene::WPtr getScene(void) {return mScene}; // no public setter, cannot change the element scene.
                
                /*
                 *  Destroy should perform all necessary operations to remove the element from the Scene and all associated
                 *  Ogre/Bullet stuff which it is used by.
                 */
                
                virtual void destroy(void) = 0;
                
            private:
                
                Scene::WPtr mScene;
                
            }
            
            /*
             *  Scene::Factory is used to generate Scene::Element and keep a shared_ptr to them. Like Elemet, it is meant 
             *  to be subclassed to be useful.
             */
            
            friend class ElementFactory
            {
                
            public:
                
                typedef boost::shared_ptr<ElementFactory> SPtr;   
                
                ElementFactory(Scene::WPtr scene) : mScene(scene) {}
                virtual ~ElementFactory() { reset(); }
                
                Scene::WPtr getScene(void) {return mScene}; // no public setter, cannot change the element scene.
                
                /*
                 *  Reset should destroy all shared_ptr references to the Elements that the factory has created
                 */
                
                void reset(void) {mElements.clear()};
                
                /*
                 *  destroyElement() should remove the element from the scene, simply by erasing it from the 
                 *  internal shared_ptr container (which calls the Element's destructor and therefore it's destroy()
                 *  method, which should in theory do its cleaning up duties).
                 */
                
                void destroyElement(Scene::Element::WPtr element) {mElements.erase(element.lock());}
                
            private:
                
                Scene::WPtr mScene;
                
                /*
                 *  The smart pointers should not be spread to outside the class, use weak pointers instead
                 */
                
                std::deque<Scene::Element::SPtr> mElements;
                
            }
            
            typedef std::deque<Element::WPtr> Elements;
            

            /**--------------------------------------------------------------
             *  Constructor/Destructor/Initialization 
             */
            Scene();
            virtual ~Scene(){};
            virtual void init(Ogre::Root *root, Ogre::RenderWindow *win);

            /**--------------------------------------------------------------
             *  Setup/Teardown 
             */
            virtual void shutdown();
            
            /**--------------------------------------------------------------
             *  Factory and Element weak_ptr container
             */
            
            Factory::SPtr getFactory(void) {return mFactory;}
            void setFactory(Factory::SPtr factory) {mFactory = factory;}
            
            const Elements& getElements();

            /**--------------------------------------------------------------
             *  MISC Info
             */
            const Ogre::String getName() {return mName;}

            /**--------------------------------------------------------------
             *  Ogre Frame Listener Forwarded messages from Application 
             */
            virtual bool frameStarted(Ogre::Real elapsedTime);
            virtual bool frameEnded(Ogre::Real elapsedTime);

            /**--------------------------------------------------------------
             *  Dynamic actions and checks
             */
            bool checkIfEnoughPlaceToAddObject(float maxDist);
            OgreBulletDynamics::RigidBody* getBodyUnderRenderWindowAt(Ogre::Vector2& pos, Ogre::Vector3 &intersectionPoint, Ogre::Ray &rayTo);
            
            /**--------------------------------------------------------------
             *  Ogre Getters
             */
            
            OgreBulletDynamics::DynamicsWorld* getDynamicsWorld(void) {return mWorld;}
            Ogre::RenderWindow* getRenderWindow(void) {return mWindow;}
            Ogre::Root* getRoot(void) {return mRoot;}
            Ogre::SceneManager* getSceneManager(void) {return mSceneMgr;}
            Ogre::Camera* getCamera(void) {return mCamera;}
            const LightMap& getLightMap(void);
            
            /**--------------------------------------------------------------
             *  Other Setters/Getters
             */
            
            void doOneStep(); // steps through simulation/dynamics useful when paused
            
            bool isPaused(void) {return mPaused;}
            void pause(bool p) {mPaused = p;}
            
            bool drawingWireFrame(void) {return mDrawWireFrame;}
            void drawWireFrame(bool draw) {mDrawWireFrame = draw;}
            
            bool drawingAabb(void) {return mDrawAabb;}
            void drawAabb(bool draw) {mDrawAabb = draw;}
            
            bool drawingAabb(void) {return mDrawAabb;}
            void drawAabb(bool draw) {mDrawAabb = draw;}
            
            bool drawingText(void) {return mDrawText;}
            void drawText(bool draw) {mDrawText = draw;}
            
            bool drawingFeaturesText(void) {return mDrawFeaturesText;}
            void drawFeaturesText(bool draw) {mDrawFeaturesText = draw;}
            
            bool drawingContactPoints(void) {return mDrawContactPoints;}
            void drawContactPoints(bool draw) {mDrawContactPoints = draw;}
            
            bool bulletLCPIsEnabled(return !mDisableBulletLCP);
            void enableBulletLCP(bool enable) {mDisableBulletLCP = !enable;}
            
            bool ccdIsEnabled(return mEnableCCD);
            void enableCCD(bool enable) {mEnableCCD = enable;}
            
        protected:
            
            virtual void initWorld (const Ogre::Vector3 &gravityVector = Ogre::Vector3 (0,-9.81,0),
                                    const Ogre::AxisAlignedBox &bounds = Ogre::AxisAlignedBox (Ogre::Vector3 (-10000, -10000, -10000),
                                                                                               Ogre::Vector3 (10000,  10000,  10000)));
            
            virtual void setupFactory();
            virtual void setupLights();
            virtual void addGround();
            virtual void updateStats();
            
            void setInfoText();
            void setDebugText(const Ogre::String &debugText) {mDebugText = debugText;}
            void getDebugLines();
            
        private:
            
            ElementFactory::SPtr                    mElementFactory;
            Elements                                mElements;
            
            OgreBulletDynamics::DynamicsWorld       *mWorld;
            Ogre::RenderWindow                      *mWindow;
            Ogre::Root                              *mRoot;
            Ogre::SceneManager                      *mSceneMgr;
            Ogre::Camera                            *mCamera;
            LightMap                                mLightMap;
            Ogre::ShadowTechnique                   mCurrentShadowTechnique;
            
            std::deque<SceneElement::SPtr>          mSceneElements;
            
            bool mDoOnestep;
            bool mPaused;
            
            bool mDrawWireFrame;
            bool mDrawAabb;
            bool mDrawFeaturesText;
            bool mDrawContactPoints;
            bool mDrawText;
            
            bool mDisableBulletLCP;
            bool mEnableCCD;
            
            OgreBulletCollisions::DebugLines    *mDebugRayLine;
            Ogre::String                        mDebugText;
            Ogre::String                        mName;
            
            static size_t mNumEntitiesInstanced;
            
            static const bool mTraceFrame = false;
            static const bool mTraceUI = true;
            
            /*
             *  Useful?
             */
            
            bool mNoDeactivation;
            bool mNoHelpText;
            bool mProfileTimings;
            bool mEnableSatComparison;
            
        };
        
    }
}

#endif //_VSC_OGRE_BULLET_SCENE_H_

